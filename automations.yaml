# Send notification when new version exists
- alias: HA Update Available Notification
  trigger:
    - platform: state
      entity_id: binary_sensor.updater
      from: 'off'
      to: 'on'
  action:
    - service: notify.email
      data:
        title: "Home Assistant"
        message: "Home Assistant {{ state_attr('binary_sensor.updater', 'newest_version') }} is available."

# Send notification when new HACS addons versions' exist
- alias: HACS Update Available Notification
  trigger:
    platform: state
    entity_id: sensor.hacs
  condition:
    - condition: template
      value_template: "{{ states(trigger.entity_id) != 'unknown'}}"
    - condition: template
      value_template: "{{ (states(trigger.entity_id) | float) != 0}}"
  action:
    service: notify.email
    data:
      title: "Home Assistant - Updates pending in HACS"
      message: >-
        {% for repo in state_attr(trigger.entity_id, 'repositories') %}
          **{{ repo.display_name }}** _{{ repo["installed_version"] }}_ -> _{{ repo["available_version"] }}_
        {% endfor %}

# Turn roof lights On when roof trapdoor is Opened
- alias: Roof Lights in sync with Roof Trapdoor OPEN
  trigger:
    - platform: state
      entity_id: cover.roof_trap_door
      to: "open"
    - platform: state
      entity_id: cover.roof_trap_door
      to: "opening"
  condition: []
  action:
    - service: light.turn_on
      entity_id: light.roof_light_bottom
    - service: light.turn_on
      entity_id: light.roof_light_top

# Turn roof lights Off when roof trapdoor is Closed
- alias: Roof Lights in sync with Roof Trapdoor CLOSE
  trigger:
    - platform: state
      entity_id: cover.roof_trap_door
      to: "closed"
    - platform: state
      entity_id: cover.roof_trap_door
      to: "closing"
  condition: []
  action:
    - service: light.turn_off
      entity_id: light.roof_light_bottom
    - service: light.turn_off
      entity_id: light.roof_light_top
    - service: switch.turn_off
      entity_id: switch.roof_right_table_power_relay
