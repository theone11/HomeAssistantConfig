# lovelace_gen

# http://patorjk.com/software/taag/#p=display&f=Banner3&t=Type%20Something%20

########  ######## ######## #### ##    ## #### ######## ####  #######  ##    ##  ######  
##     ## ##       ##        ##  ###   ##  ##     ##     ##  ##     ## ###   ## ##    ## 
##     ## ##       ##        ##  ####  ##  ##     ##     ##  ##     ## ####  ## ##       
##     ## ######   ######    ##  ## ## ##  ##     ##     ##  ##     ## ## ## ##  ######  
##     ## ##       ##        ##  ##  ####  ##     ##     ##  ##     ## ##  ####       ## 
##     ## ##       ##        ##  ##   ###  ##     ##     ##  ##     ## ##   ### ##    ## 
########  ######## ##       #### ##    ## ####    ##    ####  #######  ##    ##  ######  
# DEFINITIONS

#--------------------------------------------------------------------------------------------------
# General
#--------------------------------------------------------------------------------------------------
{% set popup_border_color = "gray" %}
{% set popup_background_color = "#505050" %}

{% set border_radius = 12 %}
{% set background_color = 'rgba(255, 255, 255, 0.1)' %}
{% set background_color_alert = 'rgba(255, 0, 0, 0.2)' %}
{% set group_scaleX, group_scaleY = 1, 1 %}

{% set scheduler_left_offset, scheduler_top_offset = 2, 2.5 %}
{% set scheduler_scaleX, scheduler_scaleY = 0.6, 0.6 %}

{% set timer_top_offset = 2.5 %}

{% set days = [("sunday"   , "1", "Sun", "ראשון"),
               ("monday"   , "2", "Mon", "שני"),
               ("tuesday"  , "3", "Tue", "שלישי"),
               ("wednesday", "4", "Wed", "רביעי"),
               ("thursday" , "5", "Thu", "חמישי"),
               ("friday"   , "6", "Fri", "שישי"),
               ("saturday" , "7", "Sat", "שבת")] %}

{% set graph_span = [("hour"    , 1),
                     ("2 hours" , 2),
                     ("6 hours" , 6),
                     ("12 hours", 12),
                     ("18 hours", 18),
                     ("day"     , 24),
                     ("36 hours", 36),
                     ("2 days"  , 48),
                     ("3 days"  , 72)] %}
#--------------------------------------------------------------------------------------------------
# Lights
#  - List all active areas.
#    If more than one exists with the same name - must be consecutive
#  - List groups for group buttons
#--------------------------------------------------------------------------------------------------
#                 entity                          , group       , left, top, scaleX, scaleY, deg)
{% set lights = [("diningroom_light"              , "downstairs", 69  , 67  , 1.3, 2  , 0),
                 ("kitchen_light_ceiling"         , "downstairs", 62.5, 82  , 1.1, 1.2, 0),
                 ("kitchen_light_klapa"           , "downstairs", 59  , 84  , 0.7, 1.7, 0),
                 ("kitchen_table_light"           , "downstairs", 64  , 73.5, 0.6, 0.6, 0),
                 ("garden_shed_light"             , "outside"   , 73.5, 58  , 0.7, 1.2, 0),
                 ("garden_light_top"              , "outside"   , 89  , 24  , 2.4, 2.4, 0),
                 ("garden_light_bottom"           , "outside"   , 69  , 20  , 8.5, 1.3, 0),
                 ("garden_light_bottom"           , "outside"   , 85  , 56  , 1.3, 6.5, 23),
                 ("playroom_light"                , "downstairs", 54  , 51  , 2  , 2.6, 0),
                 ("guest_bathroom_light"          , "downstairs", 70.7, 82  , 0.7, 1.4, 0),
                 ("patio_light_top"               , "outside"   , 65  , 32  , 2  , 2  , 0),
                 ("patio_light_bottom"            , "outside"   , 58  , 32  , 2  , 2  , 0),
                 ("master_bathroom_light_top"     , "upstairs"  , 44.5, 84  , 1.3, 0.7, 0),
                 ("master_bathroom_light_bottom"  , "upstairs"  , 44.5, 79  , 1.3, 0.6, 0),
                 ("laundryroom_light"             , "upstairs"  , 44.5, 72.5, 1.3, 1.1, 0),
                 ("main_bathroom_light_bottom"    , "upstairs"  , 44.5, 66  , 1.3, 0.6, 0),
                 ("main_bathroom_light_top"       , "upstairs"  , 44.5, 60.5, 1.3, 0.9, 0),
                 ("noga_light"                    , "upstairs"  , 43.2, 48.5, 1.6, 1.6, 0),
                 ("ella_light"                    , "upstairs"  , 36.5, 47  , 2  , 1.8, 0),
                 ("tomer_light"                   , "upstairs"  , 29  , 50.5, 1.9, 2.7, 0),
                 ("roof_light_bottom"             , "roof"      , 5.5 , 51  , 2.6, 2.2, 0),
                 ("roof_light_top"                , "roof"      , 10  , 76  , 2.2, 4.2, 0),
                 ("pantry_light"                  , "downstairs", 61  , 73.5, 0.6, 0.6, 0),
                 ("hallway_light"                 , "upstairs"  , 37.2, 58  , 2.9, 1.3, 0),
                 ("hallway_light"                 , "upstairs"  , 41  , 66  , 0.6, 2.8, 0),
                 ("stairs_light"                  , "upstairs"  , 61.5, 67  , 2.5, 1.5, 0),
                 ("stairs_light"                  , "upstairs"  , 36.2, 67  , 2.3, 1.5, 0),
                 ("master_bedroom_right_light"    , "upstairs"  , 40.5, 80.5, 1  , 1.8, 0),
                 ("master_bedroom_left_light"     , "upstairs"  , 35.8, 83  , 1.9, 2.8, 0)] %}

#                       group       , left, top
{% set light_groups = [("outside"   , 53, 37),
                       ("downstairs", 53, 74),
                       ("upstairs"  , 28, 74),
                       ("roof"      , 3 , 74)] %}

#--------------------------------------------------------------------------------------------------
# Covers
#  - List active area (windows/doors)
#  - List groups for group buttons
#--------------------------------------------------------------------------------------------------
#                 entity                     , group       , left, top, scaleX, scaleY, tap_action
{% set covers = [("diningroom_window_shutter", "downstairs", 72.9 , 68.5, 0.3 , 1.8 ,  "toggle"),
                 ("livingroom_window_shutter", "downstairs", 72.9 , 50.5, 0.3 , 1.8 ,  "toggle"),
                 ("livingroom_door_shutter"  , "downstairs", 62   , 42.2, 3.4 , 0.3 ,  "toggle"),
                 ("playroom_window_shutter"  , "downstairs", 54.5 , 42.35, 1.8 , 0.40, "toggle"),
                 ("noga_window_shutter_north", "upstairs"  , 47.75, 52  , 0.25, 1.4 ,  "toggle"),
                 ("noga_window_shutter_west" , "upstairs"  , 44.2 , 42.3, 1.4 , 0.3,   "toggle"),
                 ("ella_window_shutter"      , "upstairs"  , 37.2 , 40.7, 1.4 , 0.3,   "toggle"),
                 ("roof_trap_door"           , "upstairs"  , 12.8 , 60.3, 1.3 , 0.8 ,  "none")] %}

#                       group       , left, top
{% set cover_groups = [("downstairs", 53, 68),
                       ("upstairs"  , 28, 68)] %}

#--------------------------------------------------------------------------------------------------
# Boiler
#--------------------------------------------------------------------------------------------------
#                   entity                      , type  , left, top, display_name)
{% set boilers = [("boiler_switch"             , "switch", 3 , 68, "Water Boiler")] %}

#--------------------------------------------------------------------------------------------------
# Irrigation
#--------------------------------------------------------------------------------------------------
#                             entity                      , type  , left, top, display_name)
{% set group_irrigation_left, group_irrigation_top = 53 ,31 %}

{% set irrigation_valves = [("irrigation_sprinkler_west" , "switch", 78, 34, "West Sprinklers"),
                            ("irrigation_sprinkler_north", "switch", 82, 51, "North Sprinklers"),
                            ("irrigation_drips"          , "switch", 87, 55, "Drips")] %}

#--------------------------------------------------------------------------------------------------
# Vacuums
#--------------------------------------------------------------------------------------------------
#                 entity   , left, top
{% set vacuums = [("bottom", 53 , 80),
                  ("top"   , 28 , 80)] %}

#--------------------------------------------------------------------------------------------------
# HVAC
#--------------------------------------------------------------------------------------------------
#                 entity     , left, top
{% set hvacs = [("downstairs", 53 , 92),
                ("upstairs"  , 28 , 92)] %}

#--------------------------------------------------------------------------------------------------
# Navigation
#  - Entities are placed from bottom to top starting from navi_top value
#--------------------------------------------------------------------------------------------------
{% set navi_left, navi_top = 96, namespace(value=94) %}
{% set navi_left_offset, navi_top_offset = 1, 3 %}
{% set navi_scaleX, navi_scaleY, navi_scaleT = 0.3, 0.3, 3.5 %}
{% set navigations = ["kfar_yona", "petach_tikva", "work_aviva", "work_dan"] %}

#--------------------------------------------------------------------------------------------------
# Cameras
#--------------------------------------------------------------------------------------------------
#                   entity            , type   , left, top, icon, display_name)
{% set cameras = [("camera_1_generic" , "generic", 67, 92, "", "Camera 1"),
                 ("camera_1_mjpeg"    , "generic", 69, 92, "", "Camera 1"),
                 ("camera_1_mediaprofile_000"  , "generic", 71, 92, "mdi:cctv", "Camera 1")] %}

#--------------------------------------------------------------------------------------------------
# Statusbar
#  - Icons are placed from right to left
#--------------------------------------------------------------------------------------------------
{% set statusbar_color = 'red' %}
{% set statusbar_left, statusbar_top = namespace(value=97), 1 %}
{% set statusbar_left_offset = -1.5 %}
{% set statusbar_scaleX, statusbar_scaleY = 0.8, 0.8 %}

#                           number,        entity                            , state_t_f, state,   icon,        , card_type      , popup_title
{% set statusbar_entities = [("1", "sensor.update_available"                 , "t", "1",  "mdi:cloud-download", "ha_updates"   , "Available Updates" ),
                             ("2", "sensor.mfc_j470dw_ink_low"               , "f", "0" , "mdi:printer-alert" , "entities"     , "Ink Status"        ),
                             ("3", "sensor.water_consumption_limit_exceeded" , "f", "0" , "mdi:water-alert"   , "history-graph", "Water Consumption" )] %}

{% set statusbar_details = [("2", "sensor.mfc_j470dw_black_ink_remaining"),
                            ("2", "sensor.mfc_j470dw_cyan_ink_remaining"),
                            ("2", "sensor.mfc_j470dw_magenta_ink_remaining"),
                            ("2", "sensor.mfc_j470dw_yellow_ink_remaining"),
                            ("3", "sensor.water_consumption_hourly_limit_exceeded"),
                            ("3", "sensor.water_consumption_daily_limit_exceeded"),
                            ("3", "sensor.water_consumption_monthly_limit_exceeded"),
                            ("3", "sensor.water_consumption_monthly_forecast_limit_exceeded"),
                            ("3", "sensor.water_consumption_hourly"),
                            ("3", "sensor.water_meter_16452690_today_s_consumption"),
                            ("3", "sensor.water_meter_16452690_monthly_consumption"),
                            ("3", "sensor.water_meter_16452690_consumption_predication")] %}

#--------------------------------------------------------------------------------------------------
# Settings
#  - Divided into "tabs" and seperated by "section"
#    If a sections is defined as "y" then the "label" is used as the header
#    The type can be either a "slider" or an "entity"
#--------------------------------------------------------------------------------------------------
{% set settings_color = 'gray' %}
{% set settings_left, settings_top = 98.5, 1 %}
{% set settings_scaleX, settings_scaleY = 0.8, 0.8 %}
{% set settings_tab_names = ["Visual Limit", "Functional Limits", "Visual"] %}
#                             entity                                                 , tab, section, label                 , type, action, data
{% set settings_entities = [("input_number.mfc_j470dw_ink_low_limit"                 , "1", "y", "Printers"              , "slider", "", ""),
                            ("input_number.water_consumption_hourly_limit"           , "1", "y", "Water Consumption"     , "slider", "", ""),
                            ("input_number.water_consumption_daily_limit"            , "1", "n", ""                      , "slider", "", ""),
                            ("input_number.water_consumption_monthly_limit"          , "1", "n", ""                      , "slider", "", ""),
                            ("input_number.water_consumption_monthly_forecast_limit" , "1", "n", ""                      , "slider", "", ""),
                            ("input_number.boiler_disable_schedulers_temperature"    , "2", "y", "Water Boiler"          , "slider", "", ""),
                            ("input_number.ui_water_boiler_max_time_limit"           , "2", "y", ""                      , "slider", "", ""),
                            ("input_number.ui_irrigation_max_time_limit"             , "2", "y", "Irrigation"            , "slider", "", ""),
                            ("script.1586449615879"                                  , "3", "y", "Home Assistant Control", "entity", "", ""),
                            ("input_boolean.ui_hide_room_temperatures"               , "3", "y", "Hide"                  , "entity", "", ""),
                            ("input_boolean.ui_hide_water_boiler_temperatures"       , "3", "n", ""                      , "entity", "", ""),
                            ("input_boolean.ui_hide_weather          "               , "3", "n", ""                      , "entity", "", ""),
                            ("input_boolean.ui_hide_calendar         "               , "3", "n", ""                      , "entity", "", ""),
                            ("input_boolean.ui_hide_navigation"                      , "3", "n", ""                      , "entity", "", ""),
                            ("input_boolean.ui_show_timer_bar_or_time"               , "3", "y", "Visual Options"        , "entity", "", "")] %}

#--------------------------------------------------------------------------------------------------
# Clock
#--------------------------------------------------------------------------------------------------
{% set clock_left, clock_top = 87, -2 %}
{% set clock_scaleX, clock_scaleY = 1.5, 1.5 %}

#--------------------------------------------------------------------------------------------------
# Actions
#  - Buttons are placed from left to right
#--------------------------------------------------------------------------------------------------
{% set actions_left, actions_top = namespace(value=60), 3 %}
{% set actions_left_offset = 8 %}
{% set actions_scaleX, actions_scaleY = 3, 3 %}
#                             entity
{% set actions_entities = [("input_boolean.away"     ),
                           ("input_boolean.goodnight"),
                           ("cover.garage_door"      )] %}

#--------------------------------------------------------------------------------------------------
# Temperature Sensors
#  - They include humidity and battery values as well
#--------------------------------------------------------------------------------------------------
{% set temperature_sensors_font_size = 75 %}
#                              entity                                  , category       , left, top, font_scale
{% set temperature_sensors = [("master_bedroom_sensor_temperature"     , "room"         , 36.5, 93  , 1),
                              ("noga_sensor_temperature"               , "room"         , 45  , 59  , 1),
                              ("ella_sensor_temperature"               , "room"         , 36  , 56  , 1),
                              ("tomer_sensor_temperature"              , "room"         , 28  , 61.5, 1),
                              ("livingroom_tv_sensor_temperature"      , "room"         , 59  , 63  , 1),
                              ("livingroom_corner_sensor_temperature"  , "room"         , 71.5, 47  , 1),
                              ("kitchen_sensor_temperature"            , "room"         , 59  , 76  , 1),
                              ("water_boiler_temperature_panel_out"    , "water_boiler" , 3.5 , 52  , 1),
                              ("water_boiler_temperature_in_from_panel", "water_boiler" , 9.25, 43  , 1.5),
                              ("water_boiler_temperature_out_to_panel" , "water_boiler" , 9.5 , 47  , 1),
                              ("livingroom_temperature"                , "room"         , 71.5, 45.5, 1),
                              ("hallway_temperature"                   , "room"         , 36.6, 65.5, 1)] %}

#                              entity                             , category, left, top
{% set humidity_sensors = [("master_bedroom_sensor_humidity"   , "room", 36.5, 93  ),
                           ("noga_sensor_humidity"             , "room", 45  , 59  ),
                           ("ella_sensor_humidity"             , "room", 36  , 56  ),
                           ("tomer_sensor_humidity"            , "room", 28  , 61.5),
                           ("livingroom_tv_sensor_humidity"    , "room", 59  , 63  ),
                           ("livingroom_corner_sensor_humidity", "room", 71.5, 47  ),
                           ("kitchen_sensor_humidity"          , "room", 59  , 76  )] %}
#                              entity                            , category, left, top
{% set battery_sensors = [("master_bedroom_sensor_battery"   , "room", 36.5, 93  ),
                          ("noga_sensor_battery"             , "room", 45  , 59  ),
                          ("ella_sensor_battery"             , "room", 36  , 56  ),
                          ("tomer_sensor_battery"            , "room", 28  , 61.5),
                          ("livingroom_tv_sensor_battery"    , "room", 59  , 63  ),
                          ("livingroom_corner_sensor_battery", "room", 71.5, 47  ),
                          ("kitchen_sensor_battery"          , "room", 59  , 76  )] %}

#                   entity                                      , category, type
{% set updates = [("amoled_blue_update"                         , "HACS" , "theme"       ),
                  ("atomic_calendar_revive_update"              , "HACS" , "plugin"      ),
                  ("browser_control_card_update"                , "HACS" , "plugin"      ),
                  ("browser_mod_update"                         , "HACS" , "integration" ),
                  ("button_card_update"                         , "HACS" , "plugin"      ),
                  ("city_mind_water_meter_update"               , "HACS" , "integration" ),
                  ("clock_weather_card_update"                  , "HACS" , "plugin"      ),
                  ("config_template_card_update"                , "HACS" , "plugin"      ),
                  ("digital_clock_update"                       , "HACS" , "plugin"      ),
                  ("esphome_update"                             , "HA"   , "addon"       ),
                  ("google_theme_based_on_the_android_light_and_dark_interface_update" , "HACS" , "theme" ),
                  ("hacs_update"                                , "HA"   , "integration" ),
                  ("home_assistant_core_update"                 , "HA"   , "core" ),
                  ("home_assistant_operating_system_update"     , "HA"   , "core" ),
                  ("home_assistant_supervisor_update"           , "HA"   , "core" ),
                  ("home_assistant_swipe_navigation_update"     , "HACS" , "plugin" ),
                  ("hourly_weather_card_update"                 , "HACS" , "plugin" ),
                  ("huawei_mesh_router_update"                  , "HACS" , "integration" ),
                  ("ios_theme_based_on_the_system_wide_light_and_dark_mode_ui_update", "HACS", "theme" ),
                  ("israel_meteorological_service_sensor_update", "HACS" , "integration" ),
                  ("kiosk_mode_update"                          , "HACS" , "plugin" ),
                  ("local_tuya_update"                          , "HACS" , "integration" ),
                  ("lovelace_card_templater_update"             , "HACS" , "plugin" ),
                  ("lovelace_gen_update"                        , "HACS" , "integration" ),
                  ("metrology_metro_fluent_windows_themes_by_mmak_es_update" , "HACS", "theme" ),
                  ("mini_graph_card_update"                     , "HACS" , "plugin" ),
                  ("mini_media_player_update"                   , "HACS" , "plugin" ),
                  ("multiple_entity_row_update"                 , "HACS" , "plugin" ),
                  ("mushroom_update"                            , "HACS" , "plugin" ),
                  ("nuki_lock_update"                           , "HACS" , "integration"),
                  ("openwakeword_update"                        , "HA"   , "addon" ),
                  ("paper_buttons_row_update"                   , "HACS" , "plugin" ),
                  ("piper_update"                               , "HA"   , "addon" ),
                  ("plan_coordinates_update"                    , "HACS" , "plugin" ),
                  ("plotly_graph_card_update"                   , "HACS" , "plugin" ),
                  ("samba_backup_update"                        , "HA"   , "addon" ),
                  ("samba_share_update"                         , "HA"   , "addon" ),
                  ("scheduler_component_update"                 , "HACS" , "integration" ),
                  ("shutter_card_update"                        , "HACS" , "plugin" ),
                  ("simple_thermostat_update"                   , "HACS" , "plugin" ),
                  ("slider_entity_row_update"                   , "HACS" , "plugin" ),
                  ("smartir_update"                             , "HACS" , "integration" ),
                  ("studio_code_server_update"                  , "HA"   , "addon" ),
                  ("tabbed_card_update"                         , "HACS" , "plugin" ),
                  ("terminal_ssh_update"                        , "HA"   , "addon" ),
                  ("time_picker_card_update"                    , "HACS" , "plugin" ),
                  ("timer_bar_card_update"                      , "HACS" , "plugin" ),
                  ("vertical_slider_cover_card_update"          , "HACS" , "plugin"),
                  ("weather_card_update"                        , "HACS" , "plugin"      ),
                  ("whisper_update"                             , "HA"   , "addon"       ),
                  ("xiaomi_cloud_map_extractor_update"          , "HACS" , "integration" ),
                  ("xiaomi_vacuum_map_card_update"              , "HACS" , "plugin"      )] %}

#--------------------------------------------------------------------------------------------------
# Conditional Entities
#  - Will only be displayed if condition "state" active
#--------------------------------------------------------------------------------------------------
{% set conditional_color = "red" %}
#                             entity                                                     , state,    left, top, icon                     , tap_action
{% set conditional_entities = [("switch.roof_right_table_power_relay"                    , "on"      , 10 , 67, "mdi:power"                  , "toggle"),
                               ("binary_sensor.water_boiler_power_pump_controller_status", "on"      , 8.5, 47, "mdi:pump"                   , "none"  ),
                               ("switch.water_boiler_temperature_pump_manual"            , "on"      , 8.5, 48, "mdi:pump"                   , "none"  ),
                               ("binary_sensor.water_boiler_power_wall_switch_status"    , "on"      , 11,  45, "mdi:water-boiler"           , "none"  ),
                               ("switch.main_bathroom_heater"                            , "on"      , 44 , 66, "mdi:radiator"               , "toggle"),
                               ("switch.master_bathroom_heater"                          , "on"      , 44 , 83, "mdi:radiator"               , "toggle"),
                               ("lock.nuki_home_door_lock"                               , "unlocked", 69 , 88, "mdi:lock-open"              , "toggle"),
                               ("binary_sensor.nuki_home_door_battery_critical"          , "on"      , 69 , 88, "mdi:battery-alert"          , "none"  ),
                               ("binary_sensor.nuki_home_door_battery_charging"          , "on"      , 69 , 88, "mdi:battery-charging-medium", "none"  )] %}

##     ##    ###     ######  ########   #######   ######  
###   ###   ## ##   ##    ## ##     ## ##     ## ##    ## 
#### ####  ##   ##  ##       ##     ## ##     ## ##       
## ### ## ##     ## ##       ########  ##     ##  ######  
##     ## ######### ##       ##   ##   ##     ##       ## 
##     ## ##     ## ##    ## ##    ##  ##     ## ##    ## 
##     ## ##     ##  ######  ##     ##  #######   ######  
# MACROS

{% macro disable_tap_hold_double_ws(tap, hold, double_tap, ws) -%}
{% if tap == 1 %}
{{"  "*ws}}tap_action:
{{"  "*ws}}  action: none
{% endif %}
{% if hold == 1 %}
{{"  "*ws}}hold_action:
{{"  "*ws}}  action: none
{% endif %}
{% if double_tap == 1 %}
{{"  "*ws}}double_tap_action:
{{"  "*ws}}  action: none
{% endif %}
{%- endmacro %}

#########################################################
#########################################################
#########################################################

{% macro create_graph_span_buttons_ws(ws) -%}
# {{"  "*ws}}- type: grid
# {{"  "*ws}}  columns: {{ graph_span | count }}
# {{"  "*ws}}  square: false
# {{"  "*ws}}  cards:
# {{"  "*ws}}    {% for label, span in graph_span %}
# {{"  "*ws}}    - type: button
# {{"  "*ws}}    - type: custom:button-card
# {{"  "*ws}}      name: {{ label }}
# {{"  "*ws}}      show_name: true
# {{"  "*ws}}      show_icon: false
# {{"  "*ws}}      show_state: false
# {{"  "*ws}}      tap_action:
# {{"  "*ws}}        action: call-service
# {{"  "*ws}}        service: input_select.select_option
# {{"  "*ws}}        service_data:
# {{"  "*ws}}          entity_id: input_select.ui_graph_hours
# {{"  "*ws}}          option: {{ span }}
# {{"  "*ws}}    {% endfor %}
{{"  "*ws}}- type: custom:paper-buttons-row
{{"  "*ws}}  buttons:
{{"  "*ws}}    {% for label, span in graph_span %}
{{"  "*ws}}    - entity: input_select.ui_graph_hours
{{"  "*ws}}      name: {{ label }}
{{"  "*ws}}      icon: false
{{"  "*ws}}      tap_action:
{{"  "*ws}}        action: call-service
{{"  "*ws}}        service: input_select.select_option
{{"  "*ws}}        service_data:
{{"  "*ws}}          entity_id: input_select.ui_graph_hours
{{"  "*ws}}          option: {{ span }}
{{"  "*ws}}      state_styles:
{{"  "*ws}}        "{{ span }}":
{{"  "*ws}}          name:
{{"  "*ws}}            background-color: var(--primary-color)
{{"  "*ws}}    {% endfor %}
{%- endmacro %}

#########################################################
#########################################################
#########################################################

{% macro create_schedulers_icons(entity, left, top) -%}
{% if (entity == "hvac_upstairs") or (entity == "hvac_downstairs") or (entity == "boiler_switch") %}
{% set schedulers = ['1', '2', '3', '4'] %}
{% else %}
{% set schedulers = ['1', '2'] %}
{% endif %}
{% for s in schedulers %}
{% set number = s | int %}
      - type: conditional
        conditions:
          - entity: input_boolean.{{ entity }}_scheduler_enable{{ s }}
            state: 'on'
        elements:
          - type: icon
            icon: 'mdi:timer-outline'
            style:
              left: {{ left - scheduler_left_offset }}%
              top: {{ (top - scheduler_top_offset) + (scheduler_top_offset)/2*(number-1) }}%
              color: rgb(128, 128, 128)
              transform: translate(0%, 0%) scale({{ scheduler_scaleX }}, {{ scheduler_scaleY }})
            {{ disable_tap_hold_double_ws(1, 1, 1, 6) }}
{% endfor %}
{%- endmacro %}

#########################################################
#########################################################
#########################################################

{% macro create_warning_background(entity_problem, entity, left, top) -%}
      - type: conditional
        conditions:
          - entity: sensor.{{ entity_problem }}
            state_not: '0'
        elements:
          - type: state-icon
            entity: {{ entity }}
            style:
              background-color: {{ background_color_alert }}
              border-radius: {{ border_radius }}%
              left: {{ left }}%
              top: {{ top }}%
              transform: translate(-50%, -50%) scale({{ group_scaleX}}, {{ group_scaleY }})
            {{ disable_tap_hold_double_ws(1, 1, 1, 6) }}
{%- endmacro %}

#########################################################
#########################################################
#########################################################
# types: DSD     - Day Start Duration
#        DS      - Day Start
#        S_HVAC  - Start HVAC

{% macro create_schedulers_tab(entity, scheduler_type) -%}
                      {% if (scheduler_type == "S_HVAC") or (scheduler_type == "S_BOILER") %}
                      {% set num_schedulers = 4 %}
                      {% set schedulers = ['1', '2', '3', '4'] %}
                      {% else %}
                      {% set num_schedulers = 2 %}
                      {% set schedulers = ['1', '2'] %}
                      {% endif %}
                      type: grid
                      {% if (scheduler_type == "S_BOILER") %}
                      columns: {{ num_schedulers/2 }}
                      {% else %}
                      columns: {{ num_schedulers }}
                      {% endif %}
                      square: false
                      cards:
                        {% for s in schedulers %}
                        - type: grid
                          columns: 1
                          square: false
                          title: Scheduler {{ s }}
                          cards:
                            - type: custom:mushroom-entity-card
                              entity: input_boolean.{{ entity }}_scheduler_enable{{ s }}
                              secondary_info: none
                              fill_container: true
                              tap_action:
                                action: toggle
                              {{ disable_tap_hold_double_ws(0, 1, 1, 15) }}
                            {% if (scheduler_type == "DSD") or (scheduler_type == "DS") or (scheduler_type == "S_BOILER") %}
                            - type: grid
                              columns: 7
                              square: false
                              cards:
                                {% for day, number, name, name_he in days %}
                                - type: custom:mushroom-entity-card
                                  entity: input_boolean.{{ entity }}_day_{{ day }}{{ s }}
                                  primary_info: none
                                  secondary_info: none
                                  name: {{ name_he }}
                                  icon: mdi:numeric-{{ number }}-box-outline
                                  layout: vertical
                                  fill_container: true
                                  tap_action:
                                    action: toggle
                                  {{ disable_tap_hold_double_ws(0, 1, 1, 17) }}
                                {% endfor %}
                            {% endif %}
                            - type: 'custom:time-picker-card'
                              entity: input_datetime.{{ entity }}_start_time{{ s }}
                              {{ disable_tap_hold_double_ws(1, 1, 1, 15) }}
                              layout:
                                embedded: true
                                name: inside
                                align_controls: right
                            {% if (scheduler_type == "DSD") or (scheduler_type == "S_BOILER") %}
                            - type: custom:mushroom-number-card
                              entity: input_number.{{ entity }}_timer_duration{{ s }}
                              icon: 'mdi:timer-outline'
                              fill_container: true
                              layout: horizontal
                              {{ disable_tap_hold_double_ws(1, 1, 1, 15) }}
                            {% endif %}
                            {% if (scheduler_type == "S_HVAC") %}
                            - type: thermostat
                              entity: climate.{{ entity }}_virtual{{ s }}
                              name: Virtual {{ s }}
                              features:
                                - type: climate-hvac-modes
                                  style: icons
                                  hvac_modes:
                                    - 'off'
                                    - cool
                                    - heat
                                    - auto
                                - type: climate-fan-modes
                                  style: icons
                                  fan_modes:
                                    - low
                                    - high
                                    - mid
                            {% endif %}
                        {% endfor %}
{%- endmacro %}

 ######  ########    ###    ########  ######## 
##    ##    ##      ## ##   ##     ##    ##    
##          ##     ##   ##  ##     ##    ##    
 ######     ##    ##     ## ########     ##    
      ##    ##    ######### ##   ##      ##    
##    ##    ##    ##     ## ##    ##     ##    
 ######     ##    ##     ## ##     ##    ##    
# START

badges: []
icon: 'mdi:home-outline'
panel: true
path: floorplan
title: FloorPlan
cards:
  - type: picture-elements
    image: /local/images/floorplan/background_t.png
    elements:

########  ####  ######  ##     ## ######## ######## ########   ######  
##     ##  ##  ##    ## ##     ##    ##    ##       ##     ## ##    ## 
##     ##  ##  ##       ##     ##    ##    ##       ##     ## ##       
########   ##  ##       ##     ##    ##    ######   ########   ######  
##         ##  ##       ##     ##    ##    ##       ##   ##         ## 
##         ##  ##    ## ##     ##    ##    ##       ##    ##  ##    ## 
##        ####  ######   #######     ##    ######## ##     ##  ######  
# PICTURES

      {% for entity, group, left, top, scaleX, scaleY, deg in lights %}
      {% if ((loop.index0 == 0) or ((loop.previtem is defined) and (entity != loop.previtem))) %}
      - type: image
        entity: light.{{ entity }}
        state_image:
          'unavailable': /local/images/floorplan/transparent_square.png
          'off': /local/images/floorplan/transparent_square.png
          'on': /local/images/floorplan/lights/{{ entity }}.png
        style:
          left: 50%
          top: 50%
          width: 100%
        {{ disable_tap_hold_double_ws(1, 1, 1, 4) }}
      {% endif %}
      {% endfor %}


##      ## ########    ###    ######## ##     ## ######## ########  
##  ##  ## ##         ## ##      ##    ##     ## ##       ##     ## 
##  ##  ## ##        ##   ##     ##    ##     ## ##       ##     ## 
##  ##  ## ######   ##     ##    ##    ######### ######   ########  
##  ##  ## ##       #########    ##    ##     ## ##       ##   ##   
##  ##  ## ##       ##     ##    ##    ##     ## ##       ##    ##  
 ###  ###  ######## ##     ##    ##    ##     ## ######## ##     ## 
# WEATHER

      - type: conditional
        conditions:
          - entity: input_boolean.ui_hide_weather
            state_not: 'on'
        elements:
          # - type: custom:clock-weather-card
          #   entity: weather.accuweather
          #   sun_entity: sun.sun
          #   weather_icon_type: fill
          #   animated_icon: false
          #   forecast_days: 5
          #   locale: he
          #   time_format: 24
          #   hide_today_section: false
          #   hide_forecast_section: false
          #   style:
          #     #border: 1px solid red
          #     left: -3% #-3% 0%
          #     top: -5%  #-3% 0%
          #     transform: 'translate(50%, 50%) scale(1.5, 1.5)'

          - type: custom:weather-card
            entity: weather.accuweather
            icons: "/local/icons/weather_icons/static/"
            current: true
            details: true # true false
            number_of_forecasts: 5
            hourly_forecast: false
            style:
              #border: 1px solid red
              left: -2% #-3% 0%
              top: -2%  #-3% 0%
              transform: 'translate(0%, 0%) scale(0.9, 0.9)'
          - type: image
            image: /local/images/floorplan/transparent_square.png
            entity: weather.openweathermap
            style:
              #border: 1px solid red
              left: 0%
              top: 0%
              width: 23.8%
              height: 31.2%
              transform: 'translate(0%, 0%) scale(1, 1)'
            tap_action:
              action: fire-dom-event
              browser_mod:
                service: browser_mod.popup
                data:
                  browser_id: THIS
                  style: |
                    --popup-min-width: 80vw;
                    --popup-border-color: {{ popup_border_color }};
                    --popup-background-color: {{ popup_background_color }};
                  title: Hourly Weather Forecast
                  content:
                    type: custom:hourly-weather
                    entity: weather.openweathermap
                    name: ""
                    num_segments: '36'
                    icons: true
                    show_date: boundary
                    show_precipitation_probability: true
                    show_precipitation_amounts: true
                    show_wind: false
            {{ disable_tap_hold_double_ws(0, 1, 1, 6) }}

######     ###    ##       ######## ##    ## ########     ###    ########   
##    ##   ## ##   ##       ##       ###   ## ##     ##   ## ##   ##     ## 
##        ##   ##  ##       ##       ####  ## ##     ##  ##   ##  ##     ## 
##       ##     ## ##       ######   ## ## ## ##     ## ##     ## ########  
##       ######### ##       ##       ##  #### ##     ## ######### ##   ##   
##    ## ##     ## ##       ##       ##   ### ##     ## ##     ## ##    ##  
######  ##     ## ######## ######## ##    ## ########  ##     ## ##     ##  
# CALENDAR

      - type: conditional
        conditions:
          - entity: input_boolean.ui_hide_calendar
            state_not: 'on'
        elements:
          - type: 'custom:atomic-calendar-revive'
            entities:
              - entity: calendar.kessler_family
                name: calendar.kessler_family
              - entity: calendar.holidays_in_israel
                name: Holidays in Israel
            maxDaysToShow: 14
            maxEventCount: 6
            showLocation: true
            showMonth: false
            showWeekDay: true
            showDate: false
            showDescription: false
            showNoEventsForToday: false
            disableEventLink: true
            disableLocationLink: true
            defaultMode: Event
            refreshInterval: 60
            showHours: true
            showRelativeTime: false
            europeanDate: false
            dateFormat: 'LL'
            hoursFormat: 'HH:mm'
            showMultiDay: false
            showMultiDayEventParts: true
            style:
              left: 30%
              top: -1%
              width: 20%
              transform: 'translate(0%, 0%) scale(1, 0.96)'

##       ####  ######   ##     ## ########  ######  
##        ##  ##    ##  ##     ##    ##    ##    ## 
##        ##  ##        ##     ##    ##    ##       
##        ##  ##   #### #########    ##     ######  
##        ##  ##    ##  ##     ##    ##          ## 
##        ##  ##    ##  ##     ##    ##    ##    ## 
######## ####  ######   ##     ##    ##     ######  
# LIGHTS

      # ------------------------------
      # Define LIGHTS active areas
      # ------------------------------

      {% for entity, group, left, top, scaleX, scaleY, deg in lights %}
      {% if ((loop.index0 == 0) or ((loop.previtem is defined) and (entity != loop.previtem))) %}
      - type: image
        entity: light.{{ entity }}
        image: /local/images/floorplan/transparent_square.png
        style:
          #border: 1px solid red
          width: 3%
          left: {{ left }}%
          top: {{ top }}%
          transform: rotate({{ deg }}deg) scale({{ scaleX }}, {{ scaleY }})
        tap_action:
          action: toggle
        double_tap_action:
          action: more-info
        hold_action:
          {% if entity == "kitchen_table_light" %}
          action: fire-dom-event
          browser_mod:
            service: browser_mod.more_info
            data:
              browser_id: THIS
              style: |
                --popup-min-width: 30vw;
                --popup-max-width: 30vw;
                --popup-border-color: {{ popup_border_color }};
                --popup-background-color: {{ popup_background_color }};
              entity_id: light.kitchen_table_light_ambilight
          {% else %}
          action: more-info
          {% endif %}
      {%- endif %}
      {% endfor %}

      # ---------------------------
      # ---------------------------
      # Define Light Group Controls
      # ---------------------------
      # ---------------------------

      {% for entity_group, left, top in light_groups %}

      {{ create_warning_background(entity_group ~ "_lights_problem", "light." ~ entity_group ~ "_lights", left, top) }}

      - type: state-icon
        entity: light.{{ entity_group }}_lights
        style:
          background-color: {{ background_color }}
          border-radius: {{ border_radius }}%
          left: {{ left }}%
          top: {{ top }}%
          transform: translate(-50%, -50%) scale({{ group_scaleX}}, {{ group_scaleY }})
        tap_action:
          action: toggle
        double_tap_action:
          action: more-info
        hold_action:
          action: fire-dom-event
          browser_mod:
            service: browser_mod.popup
            data:
              browser_id: THIS
              title: {{ entity_group.capitalize() }} Lights
              content:
                entities:
                  {% for entity, group, left, top, scaleX, scaleY, deg in lights %}
                  {% if ((loop.index0 == 0) or ((loop.previtem is defined) and (entity != loop.previtem))) and (entity_group == group) %}
                  - light.{{ entity }}
                  {% endif %}
                  {% endfor %}
                show_header_toggle: false
                type: entities
      {% endfor %}

 ######   #######  ##     ## ######## ########   ######  
##    ## ##     ## ##     ## ##       ##     ## ##    ## 
##       ##     ## ##     ## ##       ##     ## ##       
##       ##     ## ##     ## ######   ########   ######  
##       ##     ##  ##   ##  ##       ##   ##         ## 
##    ## ##     ##   ## ##   ##       ##    ##  ##    ## 
 ######   #######     ###    ######## ##     ##  ######  
# COVERS

      # -----------------------------------
      # -----------------------------------
      # Define COVERS/SHUTTERS active areas
      # -----------------------------------
      # -----------------------------------

      {% for entity, group, left, top, scaleX, scaleY, tap_action in covers %}
      {% if ((loop.index0 == 0) or ((loop.previtem is defined) and (entity != loop.previtem))) %}
      - type: image
        entity: cover.{{ entity }}
        state_image:
          closed: /local/images/floorplan/shutters/square_closed.png
          closing: /local/images/floorplan/shutters/square_closing.png
          open: /local/images/floorplan/shutters/square_open.png
          opening: /local/images/floorplan/shutters/square_opening.png
        style:
          #border: 1px solid red
          width: 1.6%
          left: {{ left }}%
          top: {{ top }}%
          transform: scale({{ scaleX }}, {{ scaleY }})
        tap_action:
          action: {{ tap_action }}
        double_tap_action:
          action: more-info
        hold_action:
          action: fire-dom-event
          browser_mod:
            service: browser_mod.popup
            data:
              browser_id: THIS
              style: |
                --popup-min-width: 20vw;
                --popup-max-width: 20vw;
                --popup-border-color: {{ popup_border_color }};
                --popup-background-color: {{ popup_background_color }};
              title: Cover
              content:
                type: 'custom:vertical-slider-cover-card'
                title: not_shown
                showSidebar: false
                panelType: true
                switchHeight: 150%
                switchColor: closedColor
                entities:
                  - entity: cover.{{ entity }}
      {% endif %}
      {% endfor %}

      # -------------------------------------
      # -------------------------------------
      # Define Covers/Shutters Group Controls
      # -------------------------------------
      # -------------------------------------

      {% for entity_group, left, top in cover_groups %}

      {{ create_warning_background(entity_group ~ "_shutters_problem", "cover." ~ entity_group ~ "_shutters", left, top) }}

      {% set services = [('open_cover', 'mdi:arrow-up-bold'), ('stop_cover', 'mdi:stop'), ('close_cover', 'mdi:arrow-down-bold')] %}
      {% for service, icon in services %}
      - type: state-icon
        entity: cover.{{ entity_group }}_shutters
        state_color: false
        style:
          background-color: {{ background_color }}
          border-radius: {{ border_radius }}%
          {% if service == "open_cover" %}
          left: {{ left }}%
          {% elif service == "stop_cover" %}
          left: {{ left + 2.25 }}%
          {% elif service == "close_cover" %}
          left: {{ left + 4.5 }}%
          {% endif %}
          top: {{ top }}%
          transform: translate(-50%, -50%) scale({{ group_scaleX }}, {{ group_scaleY }})
        tap_action:
          action: call-service
          service: cover.{{ service }}
          service_data:
            entity_id:  cover.{{ entity_group }}_shutters
        double_tap_action:
          action: more-info
        hold_action:
          action: fire-dom-event
          browser_mod:
            service: browser_mod.popup
            data:
              browser_id: THIS
              style: |
                --popup-min-width: 25vw;
                --popup-max-width: 25vw;
                --popup-border-color: {{ popup_border_color }};
                --popup-background-color: {{ popup_background_color }};
              title: {{ entity_group.capitalize() }} Shutters
              content:
                type: 'custom:vertical-slider-cover-card'
                title: not_shown
                showSidebar: false
                panelType: true
                switchHeight: 150%
                switchColor: closedColor
                entities:
                  {% for entity, group, left, top, scaleX, scaleY, tap_action in covers %}
                  {% if ((loop.index0 == 0) or ((loop.previtem is defined) and (entity != loop.previtem))) and (entity_group == group) %}
                  - entity: cover.{{ entity }}
                  {% endif %}
                  {% endfor %}

      - type: icon
        entity: cover.{{ entity_group }}
        icon: {{ icon }}
        style:
          {% if service == "open_cover" %}
          left: {{ left }}%
          color: rgb(0, 255, 0)
          {% elif service == "stop_cover" %}
          left: {{ left + 2.25 }}%
          color: yellow
          {% elif service == "close_cover" %}
          left: {{ left + 4.5 }}%
          color: red
          {% endif %}
          top: {{ top }}%
          transform: translate(0%, 0%) scale({{ group_scaleX * 1 }}, {{ group_scaleY * 1 }})
        tap_action: # Tap action same as cover icons - so pressing will activate service by either the icon or the overlay
          action: call-service
          service: cover.{{ service }}
          service_data:
            entity_id:  cover.{{ entity_group }}_shutters
        {{ disable_tap_hold_double_ws(0, 1, 1, 4) }}
      {% endfor %}
      {% endfor %}

#### ########  ########  ####  ######      ###    ######## ####  #######  ##    ##
 ##  ##     ## ##     ##  ##  ##    ##    ## ##      ##     ##  ##     ## ###   ##
 ##  ##     ## ##     ##  ##  ##         ##   ##     ##     ##  ##     ## ####  ##
 ##  ########  ########   ##  ##   #### ##     ##    ##     ##  ##     ## ## ## ##
 ##  ##   ##   ##   ##    ##  ##    ##  #########    ##     ##  ##     ## ##  ####
 ##  ##    ##  ##    ##   ##  ##    ##  ##     ##    ##     ##  ##     ## ##   ###
#### ##     ## ##     ## ####  ######   ##     ##    ##    ####  #######  ##    ##
# IRRIGATION

      # -----------------------------------------------
      # -----------------------------------------------
      # Define Irrigation Controls & Day_Start_Duration Schedulers
      # -----------------------------------------------
      # -----------------------------------------------

      {% for entity, type, left, top, display_name in irrigation_valves %}

      {{ create_warning_background(entity ~ "_problem", type ~ "." ~ entity, left, top) }}

      - type: state-icon
        entity: {{ type }}.{{ entity }}
        style:
          background-color: {{ background_color }}
          border-radius: {{ border_radius }}%
          left: {{ left }}%
          top: {{ top }}%
          transform: translate(-50%, -50%) scale({{ group_scaleX }}, {{ group_scaleY }})
        tap_action:
          action: toggle
        double_tap_action:
          action: more-info
        hold_action:
          action: none
      {{ create_schedulers_icons(entity, left, top) }}

      - type: conditional
        conditions:
          - entity: input_boolean.irrigation_future
            state: 'on'
          - entity: timer.{{ entity }}
            state: 'idle'
          - entity: input_boolean.{{ entity }}
            state: 'on'
        elements:
          - type: state-label
            entity: input_datetime.irrigation_start_time
            style:
              left: {{ group_irrigation_left }}%
              top: {{ group_irrigation_top + timer_top_offset }}%
              transform: 'translate(-50%, -50%)'
            {{ disable_tap_hold_double_ws(1, 1, 1, 6) }}

      - type: conditional
        conditions:
          - entity: timer.{{ entity }}
            state_not: 'idle'
        elements:
          - type: 'custom:config-template-card'
            variables:
              SHOW_BAR: states['input_boolean.ui_show_timer_bar_or_time'].state
            entities:
              - input_boolean.ui_show_timer_bar_or_time
            card:
              type: custom:timer-bar-card
              entity: timer.{{ entity }}
              layout: full_row
              text_width: "${ SHOW_BAR === 'on' ? '0%' : '100%' }"
              sync_issues: ignore
            style:
              width: 2%
              left: {{ left }}%
              top: {{ top + timer_top_offset }}%
              transform: "${ SHOW_BAR === 'on' ? 'translate(-50%, -50%) scale(2, 1)' : 'translate(-50%, -50%) scale(1, 1)' }"
            {{ disable_tap_hold_double_ws(0, 1, 1, 6) }}

      {% endfor %}

      # -------------------------------------
      # -------------------------------------
      # Define Irrigation Group Controls
      # -------------------------------------
      # -------------------------------------

      - type: icon
        icon: mdi:calendar
        style:
          left: {{ group_irrigation_left + 0.1 }}%
          top: {{ group_irrigation_top + 0.1 }}%
          color: rgb(128, 128, 128)
          transform: translate(0%, 0%) scale({{ group_scaleX * 0.7 }}, {{ group_scaleY * 0.7 }})
          {{ disable_tap_hold_double_ws(1, 1, 1, 4) }}

      - type: state-icon
        entity: group.irrigation
        style:
          background-color: {{ background_color }}
          border-radius: {{ border_radius }}%
          left: {{ group_irrigation_left }}%
          top: {{ group_irrigation_top }}%
          transform: translate(-50%, -50%) scale(1, 1)
        tap_action:
          action: fire-dom-event
          browser_mod:
            service: browser_mod.popup
            data:
              browser_id: THIS
              style: |
                --popup-min-width: 45vw;
                --popup-max-width: 45vw;
                --popup-border-color: {{ popup_border_color }};
                --popup-background-color: {{ popup_background_color }};
              title: Irrigation
              content:
                type: custom:tabbed-card
                attributes:
                  isMinWidthIndicator: true
                  minWidth: true
                  stacked: true
                  isFadingIndicator: false
                tabs:
                  - attributes:
                      label: Direct Control
                      icon: mdi:power
                    card:
                      type: grid
                      columns: {{ irrigation_valves | count }}
                      square: false
                      cards:
                        {% for entity in irrigation_valves %}
                        # - type: button
                        #   entity: input_boolean.{{ entity[0] }}
                        #   show_name: true
                        - type: custom:mushroom-entity-card
                          entity: switch.{{ entity[0] }}
                          secondary_info: none
                          layout: vertical
                          fill_container: true
                          tap_action:
                            action: toggle
                          {{ disable_tap_hold_double_ws(0, 1, 1, 13) }}
                        {% endfor %}
                  - attributes:
                      label: One Time Cycle Control
                      icon: mdi:power
                    card:
                      type: grid
                      columns: 1
                      square: false
                      cards:
                        - type: grid
                          columns: {{ irrigation_valves | count }}
                          square: false
                          #title: Choose which irrigation valves to open during the cycle
                          cards:
                            {% for entity in irrigation_valves %}
                            # - type: button
                            #   entity: input_boolean.{{ entity[0] }}
                            #   show_name: true
                            - type: custom:mushroom-entity-card
                              entity: input_boolean.{{ entity[0] }}
                              secondary_info: none
                              layout: vertical
                              fill_container: true
                              tap_action:
                                action: toggle
                              {{ disable_tap_hold_double_ws(0, 1, 1, 15) }}
                            {% endfor %}
                        - type: grid
                          columns: 1
                          square: false
                          #title: Choose Duration and Start Time
                          cards:
                            - type: custom:mushroom-number-card
                              entity: input_number.irrigation_duration
                              icon: 'mdi:timer-outline'
                              fill_container: true
                              layout: horizontal
                              {{ disable_tap_hold_double_ws(1, 1, 1, 15) }}
                            - type: custom:time-picker-card
                              entity: input_datetime.irrigation_start_time
                              layout:
                                embedded: true
                                name: inside
                                align_controls: right
                              {{ disable_tap_hold_double_ws(1, 1, 1, 15) }}
                        - type: grid
                          columns: 2
                          square: false
                          cards:
                            - type: custom:mushroom-entity-card
                              entity: input_boolean.irrigation_immediate
                              primary_info: none
                              secondary_info: none
                              layout: vertical
                              fill_container: true
                              tap_action:
                                action: toggle
                              {{ disable_tap_hold_double_ws(0, 1, 1, 15) }}
                            # - type: button
                            #   entity: input_boolean.irrigation_immediate
                            #   show_name: false
                            #   {{ disable_tap_hold_double_ws(0, 1, 1, 15) }}
                            - type: custom:mushroom-entity-card
                              entity: input_boolean.irrigation_future
                              primary_info: none
                              secondary_info: none
                              layout: vertical
                              fill_container: true
                              tap_action:
                                action: toggle
                              {{ disable_tap_hold_double_ws(0, 1, 1, 15) }}
                            # - type: button
                            #   entity: input_boolean.irrigation_future
                            #   show_name: false
                            #   {{ disable_tap_hold_double_ws(0, 1, 1, 15) }}
                        - type: custom:timer-bar-card
                          compressed: true
                          name: Timers
                          sync_issues: ignore
                          entities:
                            {% for entity in irrigation_valves %}
                            - timer.{{ entity[0] }}
                            {% endfor %}
                        - type: history-graph
                          title: History
                          hours_to_show: 72
                          entities:
                            {% for entity in irrigation_valves %}
                            - entity: switch.{{ entity[0] }}
                            {% endfor %}
                  {% for entity, type, left, top, display_name in irrigation_valves %}
                  - attributes:
                      label: {{ display_name }}
                      icon: mdi:calendar
                    card:
                      {{ create_schedulers_tab(entity, "DSD") }}
                  {% endfor %}
        double_tap_action:
          action: more-info
        hold_action:
          action: none

######## ######## ##     ## ########  ######## ########     ###    ######## ##     ## ########  ########     ######  ######## ##    ##  ######   #######  ########   ######  
   ##    ##       ###   ### ##     ## ##       ##     ##   ## ##      ##    ##     ## ##     ## ##          ##    ## ##       ###   ## ##    ## ##     ## ##     ## ##    ## 
   ##    ##       #### #### ##     ## ##       ##     ##  ##   ##     ##    ##     ## ##     ## ##          ##       ##       ####  ## ##       ##     ## ##     ## ##       
   ##    ######   ## ### ## ########  ######   ########  ##     ##    ##    ##     ## ########  ######       ######  ######   ## ## ##  ######  ##     ## ########   ######  
   ##    ##       ##     ## ##        ##       ##   ##   #########    ##    ##     ## ##   ##   ##                ## ##       ##  ####       ## ##     ## ##   ##         ## 
   ##    ##       ##     ## ##        ##       ##    ##  ##     ##    ##    ##     ## ##    ##  ##          ##    ## ##       ##   ### ##    ## ##     ## ##    ##  ##    ## 
   ##    ######## ##     ## ##        ######## ##     ## ##     ##    ##     #######  ##     ## ########     ######  ######## ##    ##  ######   #######  ##     ##  ######  
# TEMPERATURE SENSORS

      {% for entity, category, left, top, font_scale in temperature_sensors %}
      - type: conditional
        conditions:
          {% if category == "room" %}
          - entity: input_boolean.ui_hide_room_temperatures
          {% elif category == "water_boiler" %}
          - entity: input_boolean.ui_hide_water_boiler_temperatures
          {% endif %}
            state_not: 'on'
        elements:
        - type: state-label
          entity: sensor.{{ entity }}
          style:
            left: {{ left }}%
            top: {{ top }}%
            transform: translate(0, -50%)
            font-size: {{ temperature_sensors_font_size * font_scale }}%
          {{ disable_tap_hold_double_ws(1, 1, 1, 5) }}
      {% endfor %}

      - type: state-icon
        entity: input_boolean.ui_hide_room_temperatures
        icon: mdi:thermometer
        style:
          background-color: {{ background_color }}
          border-radius: {{ border_radius }}%
          left: 3%
          top: 92%
          transform: translate(-50%, -50%) scale({{ group_scaleX }}, {{ group_scaleY }})
        tap_action:
          action: fire-dom-event
          browser_mod:
            service: browser_mod.popup
            data:
              browser_id: THIS
              style: |
                --popup-min-width: 50vw;
                --popup-max-width: 50vw;
                --popup-border-color: {{ popup_border_color }};
                --popup-background-color: {{ popup_background_color }};
              title: Temperature & Humidity Sensors
              content:
                type: grid
                columns: 1
                square: false
                cards:
{{ create_graph_span_buttons_ws(9) }}
                  - type: 'custom:config-template-card'
                    variables:
                      HOURS: states['input_select.ui_graph_hours'].state
                    entities:
                      - input_select.ui_graph_hours
                    card:
                      type: history-graph
                      entities:
                        {% for entity, category, left, top, font_scale in temperature_sensors %}
                        {% if category == "room" %}
                        - entity: sensor.{{ entity }}
                        {% endif %}
                        {% endfor %}
                        {% for entity, category, left, top in humidity_sensors %}
                        {% if category == "room" %}
                        - entity: sensor.{{ entity }}
                        {% endif %}
                        {% endfor %}
                      hours_to_show: "${ HOURS }"
                      refresh_interval: 10
        {{ disable_tap_hold_double_ws(0, 1, 1, 4) }}

##      ##    ###    ######## ######## ########     ########   #######  #### ##       ######## ########  
##  ##  ##   ## ##      ##    ##       ##     ##    ##     ## ##     ##  ##  ##       ##       ##     ## 
##  ##  ##  ##   ##     ##    ##       ##     ##    ##     ## ##     ##  ##  ##       ##       ##     ## 
##  ##  ## ##     ##    ##    ######   ########     ########  ##     ##  ##  ##       ######   ########  
##  ##  ## #########    ##    ##       ##   ##      ##     ## ##     ##  ##  ##       ##       ##   ##   
##  ##  ## ##     ##    ##    ##       ##    ##     ##     ## ##     ##  ##  ##       ##       ##    ##  
 ###  ###  ##     ##    ##    ######## ##     ##    ########   #######  #### ######## ######## ##     ## 
# WATER BOILER

      # -----------------------------------------------
      # -----------------------------------------------
      # Define Water Boilers Controls & Day_Start_Duration Schedulers
      # -----------------------------------------------
      # -----------------------------------------------

      {% for entity, type, left, top, display_name in boilers %}

      {{ create_warning_background(entity ~ "_problem", type ~ "." ~ entity, left, top) }}

      - type: icon
        icon: mdi:calendar
        style:
          left: {{ left + 0.1 }}%
          top: {{ top + 0.1 }}%
          color: rgb(128, 128, 128)
          transform: translate(0%, 0%) scale({{ group_scaleX * 0.7 }}, {{ group_scaleY * 0.7 }})
          {{ disable_tap_hold_double_ws(1, 1, 1, 4) }}

      - type: state-icon
        entity: {{ type }}.{{ entity }}
        style:
          background-color: {{ background_color }}
          border-radius: {{ border_radius }}%
          left: {{ left }}%
          top: {{ top }}%
          transform: translate(-50%, -50%) scale({{ group_scaleX }}, {{ group_scaleY }})
        tap_action:
          action: fire-dom-event
          browser_mod:
            service: browser_mod.popup
            data:
              browser_id: THIS
              style: |
                --popup-min-width: 40vw;
                --popup-max-width: 30vw;
                --popup-border-color: {{ popup_border_color }};
                --popup-background-color: {{ popup_background_color }};
              title: Water Boiler
              content:
                type: custom:tabbed-card
                attributes:
                  isMinWidthIndicator: true
                tabs:
                  - attributes:
                      label: Control
                      icon: mdi:power
                    card:
                      type: grid
                      columns: 1
                      square: false
                      cards:
                        # - type: button
                        - type: custom:button-card
                          entity: switch.{{ entity }}
                          show_icon: true
                          show_name: false
                          tap_action:
                            action: toggle
                          {{ disable_tap_hold_double_ws(0, 1, 1, 13) }}
                        - type: custom:mushroom-number-card
                          entity: input_number.{{ entity }}_duration
                          icon: 'mdi:timer-outline'
                          fill_container: true
                          layout: horizontal
                          {{ disable_tap_hold_double_ws(1, 1, 1, 13) }}
                        - type: 'custom:time-picker-card'
                          entity: input_datetime.{{ entity }}_start_time
                          layout:
                            embedded: true
                            name: inside
                            align_controls: right
                          {{ disable_tap_hold_double_ws(1, 1, 1, 13) }}
                        - type: grid
                          columns: 2
                          square: false
                          cards:
                            # - type: button
                            - type: custom:mushroom-entity-card
                              entity: input_boolean.{{ entity }}_immediate
                              primary_info: none
                              secondary_info: none
                              layout: vertical
                              fill_container: true
                              tap_action:
                                action: toggle
                              {{ disable_tap_hold_double_ws(0, 1, 1, 15) }}
                            # - type: button
                            - type: custom:mushroom-entity-card
                              entity: input_boolean.{{ entity }}_future
                              primary_info: none
                              secondary_info: none
                              layout: vertical
                              fill_container: true
                              tap_action:
                                action: toggle
                              {{ disable_tap_hold_double_ws(0, 1, 1, 15) }}
                        - type: custom:timer-bar-card
                          compressed: true
                          name: Timer
                          sync_issues: ignore
                          entities:
                            - timer.{{ entity }}
                        - type: history-graph
                          title: History
                          hours_to_show: 72
                          entities:
                            - entity: switch.boiler_switch
                              name: Wall Switch
                            - entity: binary_sensor.water_boiler_power_wall_switch_status
                              name: Wall Switch Feedback
                  - attributes:
                      label: Schedulers
                      icon: mdi:calendar
                    card:
                      {{ create_schedulers_tab(entity, "S_BOILER") }}
                  - attributes:
                      label: Information
                      icon: mdi:information-outline
                    card:
                      type: grid
                      columns: 1
                      square: false
                      cards:
                        - type: grid
                          columns: 1
                          square: false
                          cards:
{{ create_graph_span_buttons_ws(14) }}
                            - type: 'custom:config-template-card'
                              variables:
                                HOURS: states['input_select.ui_graph_hours'].state
                              entities:
                                - input_select.ui_graph_hours
                              card:
                                type: history-graph
                                entities:
                                  - entity: sensor.water_boiler_temperature_temperature_difference_state
                                  - entity: sensor.water_boiler_temperature_panel_out
                                  - entity: sensor.water_boiler_temperature_in_from_panel
                                  - entity: sensor.water_boiler_temperature_out_to_panel
                                  - entity: sensor.water_boiler_temperature_temperature_difference
                                  - entity: switch.water_boiler_temperature_pump_manual
                                    name: Pump Control
                                  - entity: binary_sensor.water_boiler_power_pump_controller_status
                                    name: Pump Feedback
                                  - entity: switch.boiler_switch
                                    name: Wall Switch
                                  - entity: binary_sensor.water_boiler_power_wall_switch_status
                                    name: Wall Switch Feedback
                                  # - entity: sensor.water_boiler_power_adc
                                  - entity: sensor.water_boiler_power_power_w
                                  - entity: sensor.water_boiler_temperature_water_level
                                hours_to_show: "${ HOURS }"
                                refresh_interval: 10
                        - type: grid
                          columns: 1
                          square: false
                          cards:
                            - type: 'custom:config-template-card'
                              variables:
                                HOURS: states['input_select.ui_graph_hours'].state
                              entities:
                                - input_select.ui_graph_hours
                              card:
                                type: history-graph
                                entities:
                                  - entity: sensor.water_boiler_power_am2302_temperature
                                  - entity: sensor.water_boiler_power_si7021_temperature
                                  - entity: sensor.water_boiler_temperature_case_temperature
                                  - entity: sensor.water_boiler_power_am2302_humidity
                                  - entity: sensor.water_boiler_power_si7021_humidity
                                  - entity: sensor.water_boiler_temperature_case_humidity
                                hours_to_show: "${ HOURS }"
                                refresh_interval: 10
        double_tap_action:
          action: more-info
        hold_action:
          action: none

      {{ create_schedulers_icons(entity, left, top) }}

      - type: conditional
        conditions:
          - entity: input_boolean.{{ entity }}_future
            state: 'on'
          - entity: timer.{{ entity }}
            state: 'idle'
        elements:
          - type: state-label
            entity: input_datetime.{{ entity }}_start_time
            style:
              #color: red
              left: {{ left }}%
              top: {{ top + timer_top_offset }}%
              transform: 'translate(-50%, -50%)'

      - type: conditional
        conditions:
          - entity: timer.{{ entity }}
            state_not: 'idle'
        elements:
          - type: 'custom:config-template-card'
            variables:
              SHOW_BAR: states['input_boolean.ui_show_timer_bar_or_time'].state
            entities:
              - input_boolean.ui_show_timer_bar_or_time
            card:
              type: custom:timer-bar-card
              entity: timer.{{ entity }}
              layout: full_row
              text_width: "${ SHOW_BAR === 'on' ? '0%' : '100%' }"
              sync_issues: ignore
            style:
              width: 2%
              left: {{ left }}%
              top: {{ top + timer_top_offset }}%
              transform: "${ SHOW_BAR === 'on' ? 'translate(-50%, -50%) scale(2, 1)' : 'translate(-50%, -50%) scale(1, 1)' }"

      {% endfor %}

##     ##    ###     ######  ##     ## ##     ## ##     ##  ######  
##     ##   ## ##   ##    ## ##     ## ##     ## ###   ### ##    ## 
##     ##  ##   ##  ##       ##     ## ##     ## #### #### ##       
##     ## ##     ## ##       ##     ## ##     ## ## ### ##  ######  
 ##   ##  ######### ##       ##     ## ##     ## ##     ##       ## 
  ## ##   ##     ## ##    ## ##     ## ##     ## ##     ## ##    ## 
   ###    ##     ##  ######   #######   #######  ##     ##  ######  
# VACUUMS

      {% for entity, left, top in vacuums %}
      
      {{ create_warning_background("vacuum_" ~ entity ~ "_problem", "vacuum.vacuum_" ~ entity, left, top) }}

      - type: icon
        icon: mdi:calendar
        style:
          left: {{ left + 0.1 }}%
          top: {{ top + 0.1 }}%
          color: rgb(128, 128, 128)
          transform: translate(0%, 0%) scale({{ group_scaleX * 0.7 }}, {{ group_scaleY * 0.7 }})
          {{ disable_tap_hold_double_ws(1, 1, 1, 4) }}
      
      - type: state-icon
        entity: vacuum.vacuum_{{ entity }}
        style:
          background-color: {{ background_color }}
          border-radius: {{ border_radius }}%
          left: {{ left }}%
          top: {{ top }}%
          transform: translate(-50%, -50%) scale({{ group_scaleX }}, {{ group_scaleY }})
        tap_action:
          action: fire-dom-event
          browser_mod:
            service: browser_mod.popup
            data:
              browser_id: THIS
              style: |
                --popup-min-width: 30vw;
                --popup-max-width: 30vw;
                --popup-border-color: {{ popup_border_color }};
                --popup-background-color: {{ popup_background_color }};
              title: Vacuum {{ entity.capitalize() }}
              content:
                type: custom:tabbed-card
                attributes:
                  isMinWidthIndicator: true
                tabs:
                  - attributes:
                      label: Control
                      icon: mdi:power
                    card:
                      type: custom:xiaomi-vacuum-map-card
                      map_source:
                        camera: camera.vacuum_{{ entity }}
                      calibration_source:
                        camera: true
                      entity: vacuum.vacuum_{{ entity }}
                      vacuum_platform: default
                      map_locked: true
                  - attributes:
                      label: Schedulers
                      icon: mdi:calendar
                    card:
                      {{ create_schedulers_tab("vacuum_" ~ entity, "DS") }}
        double_tap_action:
          action: more-info
        hold_action:
          action: none

      {{ create_schedulers_icons("vacuum_" ~ entity, left, top) }}
      {% endfor %}

##     ## ######## ########  ####    ###       ########  ##          ###    ##    ## ######## ########   ######  
###   ### ##       ##     ##  ##    ## ##      ##     ## ##         ## ##    ##  ##  ##       ##     ## ##    ## 
#### #### ##       ##     ##  ##   ##   ##     ##     ## ##        ##   ##    ####   ##       ##     ## ##       
## ### ## ######   ##     ##  ##  ##     ##    ########  ##       ##     ##    ##    ######   ########   ######  
##     ## ##       ##     ##  ##  #########    ##        ##       #########    ##    ##       ##   ##         ## 
##     ## ##       ##     ##  ##  ##     ##    ##        ##       ##     ##    ##    ##       ##    ##  ##    ## 
##     ## ######## ########  #### ##     ##    ##        ######## ##     ##    ##    ######## ##     ##  ######  
# MEDIA PLAYERS

      - type: state-icon
        entity: media_player.kitchen_speaker
        icon: 'mdi:music'
        style:
          background-color: {{ background_color }}
          border-radius: {{ border_radius }}%
          left: 53%
          top: 86%
        tap_action:
          action: fire-dom-event
          browser_mod:
            service: browser_mod.popup
            data:
              browser_id: THIS
              style: |
                --popup-min-width: 80vw;
                --popup-max-width: 80vw;
                --popup-border-color: {{ popup_border_color }};
                --popup-background-color: {{ popup_background_color }};
              content:
                type: iframe
                url: !secret squeezebox_url
                aspect: 100%
        hold_action:
          action: fire-dom-event
          browser_mod:
            service: browser_mod.popup
            data:
              browser_id: THIS
              style: |
                --popup-min-width: 80vw;
                --popup-max-width: 80vw;
                --popup-border-color: {{ popup_border_color }};
                --popup-background-color: {{ popup_background_color }};
              content:
                type: iframe
                url: !secret squeezebox_url_regular
                aspect: 100%

##     ## ##     ##    ###     ######  
##     ## ##     ##   ## ##   ##    ## 
##     ## ##     ##  ##   ##  ##       
######### ##     ## ##     ## ##       
##     ##  ##   ##  ######### ##       
##     ##   ## ##   ##     ## ##    ## 
##     ##    ###    ##     ##  ######  
# HVAC

      # --------------------------------------------
      # --------------------------------------------
      # Define HVAC Controls & Start_Stop Schedulers
      # --------------------------------------------
      # --------------------------------------------

      {% for entity, left, top in hvacs %}

      {{ create_warning_background("hvac_" ~ entity ~ "_problem", "climate.hvac_" ~ entity, left, top) }}

      - type: icon
        icon: mdi:calendar
        style:
          left: {{ left + 0.1 }}%
          top: {{ top + 0.1 }}%
          color: rgb(128, 128, 128)
          transform: translate(0%, 0%) scale({{ group_scaleX * 0.5 }}, {{ group_scaleY * 0.5 }})
          {{ disable_tap_hold_double_ws(1, 1, 1, 4) }}

      - type: state-icon
        entity: climate.hvac_{{ entity }}
        icon: 'mdi:air-conditioner'
        style:
          background-color: {{ background_color }}
          border-radius: {{ border_radius }}%
          left: {{ left }}%
          top: {{ top }}%
          transform: translate(-50%, -50%) scale({{ scaleX }}, {{ scaleY }})
        tap_action:
          action: fire-dom-event
          browser_mod:
            service: browser_mod.popup
            data:
              browser_id: THIS
              style: |
                --popup-min-width: 45vw;
                --popup-max-width: 45vw;
                --popup-border-color: {{ popup_border_color }};
                --popup-background-color: {{ popup_background_color }};
              title: {{ entity.capitalize() }} HVAC
              content:
                type: custom:tabbed-card
                attributes:
                  isMinWidthIndicator: true
                tabs:
                  - attributes:
                      label: Control
                      icon: mdi:power
                    card:
                      type: thermostat
                      entity: climate.hvac_{{ entity }}
                      features:
                        - type: climate-hvac-modes
                          style: icons
                          hvac_modes:
                            - 'off'
                            - cool
                            - heat
                            - auto
                        - type: climate-fan-modes
                          style: icons
                          fan_modes:
                            - low
                            - high
                            - mid
                  - attributes:
                      label: Schedulers
                      icon: mdi:calendar
                    card:
                      {{ create_schedulers_tab("hvac_" ~ entity, "S_HVAC") }}
        double_tap_action:
          action: more-info
        hold_action:
          action: none

      # Show temperature
      - type: state-label
        entity: sensor.{{ entity ~ '_average_temperature' }}
        style:
          left: {{ left + 1.25 }}%
          top: {{ top - 1}}%
          transform: 'translate(0, -50%)'

      # Show airconditioner state (if ON)
      - type: conditional
        conditions:
          - entity: climate.hvac_{{ entity }}
            state_not: 'off'
        elements:
          - type: state-label
            entity: climate.hvac_{{ entity }}
            style:
              left: {{ left + 1.25 }}%
              top: {{ top + 0.5 }}%
              transform: 'translate(0, -50%)'
          - type: state-label
            entity: climate.hvac_{{ entity }}
            attribute: "fan_mode"
            style:
              left: {{ left + 3 }}%
              top: {{ top + 0.5 }}%
              transform: 'translate(0, -50%)'
          - type: state-label
            entity: climate.hvac_{{ entity }}
            attribute: "temperature"
            style:
              left: {{ left + 4.5 }}%
              top: {{ top + 0.5 }}%
              transform: 'translate(0, -50%)'

      {{ create_schedulers_icons("hvac_" ~ entity, left, top) }}
      {% endfor %}

##    ##    ###    ##     ## ####  ######      ###    ######## ####  #######  ##    ## 
###   ##   ## ##   ##     ##  ##  ##    ##    ## ##      ##     ##  ##     ## ###   ## 
####  ##  ##   ##  ##     ##  ##  ##         ##   ##     ##     ##  ##     ## ####  ## 
## ## ## ##     ## ##     ##  ##  ##   #### ##     ##    ##     ##  ##     ## ## ## ## 
##  #### #########  ##   ##   ##  ##    ##  #########    ##     ##  ##     ## ##  #### 
##   ### ##     ##   ## ##    ##  ##    ##  ##     ##    ##     ##  ##     ## ##   ### 
##    ## ##     ##    ###    ####  ######   ##     ##    ##    ####  #######  ##    ## 
# NAVIGATION

# Navigation images/logod should be 300x300 with transparent background

      - type: conditional
        conditions:
          - entity: input_boolean.ui_hide_navigation
            state_not: 'on'
        elements:
          {% for entity in navigations %}
          - type: image
            image: /local/images/floorplan/navigation/{{ entity }}.png
            style:
              left: {{ navi_left }}%
              top: {{ navi_top.value }}%
              width: 4%
              transform: translate(-50%, -50%) scale({{ navi_scaleX }}, {{ navi_scaleY }})
            {{ disable_tap_hold_double_ws(1, 1, 1, 6) }}

          - type: state-label
            entity: sensor.{{ entity }}
            attribute: route
            style:
              left: {{ navi_left - navi_left_offset}}%
              top: {{ navi_top.value }}%
              transform: translate(-100%, -50%) scale({{ navi_scaleX * navi_scaleT }}, {{ navi_scaleY * navi_scaleT }})
            {{ disable_tap_hold_double_ws(1, 1, 1, 6) }}

          - type: state-label
            entity: sensor.{{ entity }}_ui
            style:
              left: {{ navi_left + navi_left_offset }}%
              top: {{ navi_top.value }}%
              transform: translate(0%, -50%) scale({{ navi_scaleX * navi_scaleT }}, {{ navi_scaleY * navi_scaleT }})
            {{ disable_tap_hold_double_ws(1, 1, 1, 6) }}
          {% set navi_top.value = navi_top.value - navi_top_offset %}
          {% endfor %}


 ######     ###    ##     ## ######## ########     ###     ######  
##    ##   ## ##   ###   ### ##       ##     ##   ## ##   ##    ## 
##        ##   ##  #### #### ##       ##     ##  ##   ##  ##       
##       ##     ## ## ### ## ######   ########  ##     ##  ######  
##       ######### ##     ## ##       ##   ##   #########       ## 
##    ## ##     ## ##     ## ##       ##    ##  ##     ## ##    ## 
 ######  ##     ## ##     ## ######## ##     ## ##     ##  ######  
# CAMERAS

      # {% for entity, type, left, top, icon, display_name in cameras %}

      # - type: state-icon
      #   entity: camera.{{ entity }}
      #   icon: {{ icon }}
      #   style:
      #     background-color: {{ background_color }}
      #     border-radius: {{ border_radius }}%
      #     left: {{ left }}%
      #     top: {{ top }}%
      #     transform: translate(-50%, -50%) scale({{ scaleX }}, {{ scaleY }})
      #   tap_action:
      #     action: fire-dom-event
      #     browser_mod:
      #       service: browser_mod.popup
      #       data:
      #         browser_id: THIS
      #         style: |
      #           --popup-min-width: 40vw;
      #           --popup-max-width: 40vw;
      #           --popup-border-color: {{ popup_border_color }};
      #           --popup-background-color: {{ popup_background_color }};
      #         title: {{ entity.capitalize() }}
      #         content:
      #           type: picture-entity
      #           entity: camera.{{ entity }}
      #           show_state: false
      #           show_name: false
      #           camera_view: live
      #   double_tap_action:
      #     action: more-info
      #   hold_action:
      #     action: more-info
      # {% endfor %}

 ######  ########    ###    ######## ##     ##  ######        ########     ###    ########  
##    ##    ##      ## ##      ##    ##     ## ##    ##       ##     ##   ## ##   ##     ## 
##          ##     ##   ##     ##    ##     ## ##             ##     ##  ##   ##  ##     ## 
 ######     ##    ##     ##    ##    ##     ##  ######        ########  ##     ## ########  
      ##    ##    #########    ##    ##     ##       ##       ##     ## ######### ##   ##   
##    ##    ##    ##     ##    ##    ##     ## ##    ##       ##     ## ##     ## ##    ##  
 ######     ##    ##     ##    ##     #######   ######        ########  ##     ## ##     ## 
# STATUS BAR

      {% for number, entity, state_t_f, state, icon, card_type, popup_title in statusbar_entities %}
      - type: conditional
        conditions:
          - entity: {{ entity }}
            {% if state_t_f == "t" %}
            state: "{{ state }}"
            {% else %}
            state_not: "{{ state }}"
            {% endif %}
        elements:
          - type: icon
            icon: {{ icon }}
            entity: {{ entity }}
            tap_action:
            {% if (card_type == "more-info") %}
              action: more-info
            {% else %}
              action: fire-dom-event
              browser_mod:
                service: browser_mod.popup
                data:
                  browser_id: THIS
                  style: |
                    --popup-min-width: 50vw;
                    --popup-max-width: 50vw;
                    --popup-border-color: {{ popup_border_color }};
                    --popup-background-color: {{ popup_background_color }};
                  title: {{ popup_title }}
                  content:
                  {% if (card_type == "entities") %}
                    type: entities
                    show_header_toggle: false
                    entities:
                    {% for number2, entity2 in statusbar_details %}
                    {% if number2 == number %}
                      - entity: {{ entity2 }}
                    {% endif %}
                    {% endfor %}
                  {% elif (card_type == "history-graph") %}
                    type: history-graph
                    entities:
                    {% for number2, entity2 in statusbar_details %}
                    {% if number2 == number %}
                      - entity: {{ entity2 }}
                    {% endif %}
                    {% endfor %}
                  {% elif (card_type == "ha_updates") %}
                    type: grid
                    columns: 1
                    square: false
                    cards:
                      - type: grid
                        columns: 3
                        square: false
                        cards:
                          {% for entity, category, type in updates %}
                          - type: conditional
                            conditions:
                              - condition: state
                                entity: update.{{ entity }}
                                state: 'on'
                            card:
                              type: custom:mushroom-update-card
                              entity: update.{{ entity }}
                              {% if category == "HA" %}
                              icon: mdi:home-assistant
                              {% elif category == "HACS" %}
                              icon: hacs:hacs
                              {% endif %}
                              layout: vertical
                              secondary_info: state
                              icon_type: entity-picture
                              show_buttons_control: true
                              collapsible_controls: true
                          {% endfor %}
                  {% else %}
                    type: markdown
                    content: "**Card type not defined**"
                  {% endif %}
            {% endif %}
            style:
              color: {{ statusbar_color }}
              left: {{ statusbar_left.value }}%
              top: {{ statusbar_top }}%
              transform: translate(0%, 0%) scale({{ statusbar_scaleX }}, {{ statusbar_scaleY }})
            {% set statusbar_left.value = statusbar_left.value + statusbar_left_offset %}
      {% endfor %}

 ######  ######## ######## ######## #### ##    ##  ######    ######  
##    ## ##          ##       ##     ##  ###   ## ##    ##  ##    ## 
##       ##          ##       ##     ##  ####  ## ##        ##       
 ######  ######      ##       ##     ##  ## ## ## ##   ####  ######  
      ## ##          ##       ##     ##  ##  #### ##    ##        ## 
##    ## ##          ##       ##     ##  ##   ### ##    ##  ##    ## 
 ######  ########    ##       ##    #### ##    ##  ######    ######  
# SETTINGS

      - type: icon
        icon: mdi:cog
        style:
          color: {{ settings_color }}
          left: {{ settings_left }}%
          top: {{ settings_top }}%
          transform: translate(0%, 0%) scale({{ settings_scaleX }}, {{ settings_scaleY }})
        tap_action:
          action: fire-dom-event
          browser_mod:
            service: browser_mod.popup
            data:
              browser_id: THIS
              style: |
                --popup-min-width: 50vw;
                --popup-max-width: 50vw;
                --popup-border-color: {{ popup_border_color }};
                --popup-background-color: {{ popup_background_color }};
              title: Settings
              content:
                type: custom:tabbed-card
                tabs:
                  {% for current_tab in ['1', '2', '3'] %}
                  - attributes:
                      label: {{settings_tab_names[loop.index0]}}
                    card:
                      type: entities
                      show_header_toggle: false
                      entities:
                        {% for entity, tab, section, label, type, action, data in settings_entities %}
                          {% if tab == current_tab %}
                            {% if section == "y" %}
                        - type: section
                          label: {{ label }}
                            {% endif %}
                            {%if type == "slider" %}
                        - type: custom:mushroom-number-card
                          entity: {{ entity }}
                          fill_container: true
                          layout: horizontal
                            {% elif type == "button" %}
                        - type: button
                          name: {{ entity }}
                          tap_action:
                            actions: {{ action }}
                            ulr_path: {{ data }}
                            {% else %}
                        - type: custom:mushroom-entity-card
                          entity: {{ entity }}
                          fill_container: true
                          layout: horizontal
                          primary_info: name
                          secondary_info: none
                          tap_action:
                            action: toggle
                        # - entity: {{ entity }}
                            {% endif %}
                          {% endif %}
                        {% endfor %}
                        - type: section
                  {% endfor %}
        hold_action:
          action: fire-dom-event
          browser_mod:
            service: browser_mod.navigate
            data:
              path: "/config/dashboard"
              browser_id: THIS
        {{ disable_tap_hold_double_ws(0, 0, 1, 4) }}

##     ## ##    ## ########     ###    #### ########  
##     ## ###   ## ##     ##   ## ##    ##  ##     ## 
##     ## ####  ## ##     ##  ##   ##   ##  ##     ## 
##     ## ## ## ## ########  ##     ##  ##  ##     ## 
##     ## ##  #### ##   ##   #########  ##  ##     ## 
##     ## ##   ### ##    ##  ##     ##  ##  ##     ## 
 #######  ##    ## ##     ## ##     ## #### ########  
# UNRAID

      {{ create_warning_background("unraid_problem", "binary_sensor.unraid", 3, 80) }}

      - type: state-icon
        entity: binary_sensor.unraid
        style:
          background-color: {{ background_color }}
          border-radius: {{ border_radius }}%
          left: 3%
          top: 80%
          transform: translate(-50%, -50%) scale({{ group_scaleX }}, {{ group_scaleY }})
        tap_action:
          action: fire-dom-event
          browser_mod:
            service: browser_mod.popup
            data:
              hide_header: true
              browser_id: THIS
              style: |
                --popup-min-width: 80vw;
                --popup-max-width: 80vw;
                --popup-border-color: {{ popup_border_color }};
                --popup-background-color: {{ popup_background_color }};
              title: UnRAID Server
              content:
                type: iframe
                url: http://192.168.1.104/Dashboard
                aspect: 100%
        {{ disable_tap_hold_double_ws(0, 1, 1, 4) }}

##      ##    ###    ######## ######## ########  
##  ##  ##   ## ##      ##    ##       ##     ## 
##  ##  ##  ##   ##     ##    ##       ##     ## 
##  ##  ## ##     ##    ##    ######   ########  
##  ##  ## #########    ##    ##       ##   ##   
##  ##  ## ##     ##    ##    ##       ##    ##  
 ###  ###  ##     ##    ##    ######## ##     ## 
# WATER

      - type: state-icon
        entity: sensor.citymind_16452690_meter_last_read
        icon: mdi:water-pump
        style:
          background-color: {{ background_color }}
          border-radius: {{ border_radius }}%
          left: 3%
          top: 86%
          transform: translate(-50%, -50%) scale({{ group_scaleX }}, {{ group_scaleY }})
        tap_action:
          action: fire-dom-event
          browser_mod:
            service: browser_mod.popup
            data:
              browser_id: THIS
              style: |
                --popup-min-width: 40vw;
                --popup-max-width: 40vw;
                --popup-border-color: {{ popup_border_color }};
                --popup-background-color: {{ popup_background_color }};
              title: Water Consumption
              content:
                type: grid
                columns: 1
                square: false
                cards:
                  - type: history-graph
                    entities:
                      - entity: sensor.citymind_16452690_meter_today_s_consumption
                      - entity: sensor.water_consumption_hourly
                    #hours_to_show: 12
                    refresh_interval: 10
                  - type: history-graph
                    entities:
                      - entity: sensor.citymind_16452690_meter_consumption_forecast
                      - entity: sensor.citymind_16452690_meter_monthly_consumption
                    #hours_to_show: 12
                    refresh_interval: 10
                  - type: history-graph
                    entities:
                      - entity: sensor.citymind_16452690_meter_last_read
                    #hours_to_show: 12
                    refresh_interval: 10
        {{ disable_tap_hold_double_ws(0, 1, 1, 4) }}

   ###     ######  ######## ####  #######  ##    ##  ######  
  ## ##   ##    ##    ##     ##  ##     ## ###   ## ##    ## 
 ##   ##  ##          ##     ##  ##     ## ####  ## ##       
##     ## ##          ##     ##  ##     ## ## ## ##  ######  
######### ##          ##     ##  ##     ## ##  ####       ## 
##     ## ##    ##    ##     ##  ##     ## ##   ### ##    ## 
##     ##  ######     ##    ####  #######  ##    ##  ######  
# ACTIONS

      {% for entity in actions_entities %}
      - type: state-icon
        entity: {{ entity }}
        style:
          background-color: {{ background_color }}
          border-radius: {{ border_radius }}%
          left: {{ actions_left.value }}%
          top: {{ actions_top }}%
          transform: translate(0%, 100%) scale({{ actions_scaleX }}, {{ actions_scaleY }})
        tap_action:
          action: toggle
        double_tap_action:
          action: more-info
        hold_action:
          action: more-info
        {% set actions_left.value = actions_left.value + actions_left_offset %}
      {% endfor %}

 ######  ##        #######   ######  ##    ## 
##    ## ##       ##     ## ##    ## ##   ##  
##       ##       ##     ## ##       ##  ##   
##       ##       ##     ## ##       #####    
##       ##       ##     ## ##       ##  ##   
##    ## ##       ##     ## ##    ## ##   ##  
 ######  ########  #######   ######  ##    ## 
# CLOCK

      - type: custom:digital-clock
        locale: he
        dateFormat:
          weekday: short
          day: 2-digit
          month: long
        timeFormat:
          hour: 2-digit
          minute: 2-digit
        style:
          background-color: {{ background_color }}
          border-radius: {{ border_radius }}%
          left: {{ clock_left }}%
          top: {{ clock_top }}%
          transform: translate(0%, 100%) scale({{ clock_scaleX }}, {{clock_scaleY }})

 ######   #######  ##    ## ########  #### ######## ####  #######  ##    ##    ###    ##          ######## ##    ## ######## #### ######## #### ########  ######  
##    ## ##     ## ###   ## ##     ##  ##     ##     ##  ##     ## ###   ##   ## ##   ##          ##       ###   ##    ##     ##     ##     ##  ##       ##    ## 
##       ##     ## ####  ## ##     ##  ##     ##     ##  ##     ## ####  ##  ##   ##  ##          ##       ####  ##    ##     ##     ##     ##  ##       ##       
##       ##     ## ## ## ## ##     ##  ##     ##     ##  ##     ## ## ## ## ##     ## ##          ######   ## ## ##    ##     ##     ##     ##  ######    ######  
##       ##     ## ##  #### ##     ##  ##     ##     ##  ##     ## ##  #### ######### ##          ##       ##  ####    ##     ##     ##     ##  ##             ## 
##    ## ##     ## ##   ### ##     ##  ##     ##     ##  ##     ## ##   ### ##     ## ##          ##       ##   ###    ##     ##     ##     ##  ##       ##    ## 
 ######   #######  ##    ## ########  ####    ##    ####  #######  ##    ## ##     ## ########    ######## ##    ##    ##    ####    ##    #### ########  ######  
# CONDITIONAL ENTITIES
# Physical enities that appear only on certain condition

      {% for entity, state, left, top, icon, tap_action in conditional_entities %}

      - type: conditional
        conditions:
          - entity: {{ entity }}
            state: '{{ state }}'
        elements:
          - type: icon
            icon: {{ icon }}
            entity: {{ entity }}
            style:
              color: {{ conditional_color }}
              left: {{ left }}%
              top: {{ top }}%
              transform: 'translate(0, -50%)'
            tap_action:
              action: {{ tap_action }}
            {{ disable_tap_hold_double_ws(0, 1, 1, 6) }}

      {% endfor %}

########  ######## ######## ########  ########  ######  ##     ##                ########  ######## ##        #######     ###    ########  
##     ## ##       ##       ##     ## ##       ##    ## ##     ##                ##     ## ##       ##       ##     ##   ## ##   ##     ## 
##     ## ##       ##       ##     ## ##       ##       ##     ##                ##     ## ##       ##       ##     ##  ##   ##  ##     ## 
########  ######   ######   ########  ######    ######  #########                ########  ######   ##       ##     ## ##     ## ##     ## 
##   ##   ##       ##       ##   ##   ##             ## ##     ##                ##   ##   ##       ##       ##     ## ######### ##     ## 
##    ##  ##       ##       ##    ##  ##       ##    ## ##     ##                ##    ##  ##       ##       ##     ## ##     ## ##     ## 
##     ## ######## ##       ##     ## ########  ######  ##     ##                ##     ## ######## ########  #######  ##     ## ########  
# REFRESH RELOAD

      - type: icon
        icon: mdi:refresh
        style:
          color: {{ settings_color }}
          left: {{ settings_left }}%
          top: {{ settings_top + 2.5 }}%
          transform: translate(0%, 0%) scale({{ settings_scaleX }}, {{ settings_scaleY }})
        tap_action:
          action: fire-dom-event
          browser_mod:
            service: browser_mod.javascript #lovelace_reload
            data:
              code: lovelace_reload()
              browser_id: THIS
        hold_action:
          action: fire-dom-event
          browser_mod:
            service: browser_mod.refresh #window_reload
            data:
              browser_id: THIS
        {{ disable_tap_hold_double_ws(0, 0, 1, 4) }}

      - type: custom:browser-control-card
        hide_fullscreen: true
        hide_screenlock: true
        hide_zoom: true
        hide_refresh: false
        no_padding: true
        small_buttons: false
        style:
          background-color: {{ background_color }}
          border-radius: {{ border_radius }}%
          left: {{ settings_left - 0.75 }}%
          top: {{ settings_top + 4 }}%
          transform: translate(0%, 0%) scale({{ settings_scaleX/2 }}, {{settings_scaleY/2 }})

      # - type: custom:plan-coordinates
      #   style:
      #     background-color: white
      #     color: red
      #     left: 95%
      #     top: 50%
