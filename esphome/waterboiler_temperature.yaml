substitutions:
  platform: ESP8266
  board: d1_mini
  device_name: waterboiler_temperature
  friendly_name: "Water Boiler Temperature"
  static_ip: 192.168.1.50
  esp8266_restore_from_flash: "FALSE" # "TRUE" / "FALSE" !!! Make sure that all switches, lights, fans, globals, etc... are set to ALWAYS_ON/OFF to minimize flash write cycles
  hide_restart_switch: "FALSE" # "TRUE" / "FALSE"
  
  #MQTT_broker_topic_prefix: myhome/test # myhome/<Floor>/<Room>/<Function>/<Location>

packages:
  common: !include zzz_common_files/common.yaml

##############################################################
#   Custom Boiler Temperature functionality
##############################################################
#
# Status LED: GPIO02
#
# DHT22 Wemos Shield Temperature & Humidity sensor    : D4 GPIO02
#
# MAX31855 SPI K-Type Thermocouple Temperature Sensor SCLK : D5 GPIO14
# MAX31855 SPI K-Type Thermocouple Temperature Sensor MISO : D6 GPIO12
# MAX31855 SPI K-Type Thermocouple Temperature Sensor CS1  : TX GPIO01
# MAX31855 SPI K-Type Thermocouple Temperature Sensor CS2  : D0 GPIO16
# MAX31855 SPI K-Type Thermocouple Temperature Sensor CS3  : D8 GPIO15
#
# Water Sensor Analog output  : A0
# Water Sensor Digital output : D2 GPIO04 (SDA)
#
# Pump Manual : D1 GPIO05 (SCL)
# Pump Auto   : D7 GPI013 (MOSI)
#
# Spare : RX GPIO03 (RX)
# Spare : D3 GPIO00 (FLASH)
#
##############################################################

# status_led:
#   pin:
#     number: GPIO02
#     inverted: True

spi:

  miso_pin: D6
  clk_pin: D5


sensor:

  - platform: dht
    model: DHT22
    pin: D4
    temperature:
      name: "${friendly_name} Case Temperature"
      filters:
      - median:
          window_size: 7
          send_every: 4
          send_first_at: 3
    humidity:
      name: "${friendly_name} Case Humidity"
      filters:
      - median:
          window_size: 7
          send_every: 4
          send_first_at: 3
    update_interval: 10 sec

  - platform: max31855
    name: "${friendly_name} Panel Out"
    id: panel_out
    cs_pin: GPIO01
    update_interval: 5s
    filters:
      - median:
          window_size: 7
          send_every: 4
          send_first_at: 3
    reference_temperature:
      id: panel_out_internal
      name: "${friendly_name} Panel Out Internal"
      filters:
        - median:
            window_size: 7
            send_every: 4
            send_first_at: 3
      
  - platform: max31855
    name: "${friendly_name} In From Panel"
    id: in_from_panel
    cs_pin: D0
    update_interval: 5s
    filters:
      - median:
          window_size: 7
          send_every: 4
          send_first_at: 3
    reference_temperature:
      id: in_from_panel_internal
      name: "${friendly_name} In From Panel Internal"
      filters:
        - median:
            window_size: 7
            send_every: 4
            send_first_at: 3

  - platform: max31855
    name: "${friendly_name} Out to Panel"
    id: out_to_panel
    cs_pin: D8
    update_interval: 5s
    filters:
      - median:
          window_size: 7
          send_every: 4
          send_first_at: 3
    reference_temperature:
      id: out_to_panel_internal
      name: "${friendly_name} Out to Panel Internal"
      filters:
        - median:
            window_size: 7
            send_every: 4
            send_first_at: 3
        
  - platform: adc
    pin: A0
    name: "${friendly_name} Water Level"
    icon: mdi:waves
    update_interval: 2s
    filters:
      - lambda: return (1 - x);
      - median:
          window_size: 5
          send_every: 3
          send_first_at: 3

  - platform: template
    id: temperature_difference
    name: "${friendly_name} Temperature Difference"
    update_interval: 3s
    icon: mdi:thermometer
    unit_of_measurement: "Â°C"
    accuracy_decimals: 1
    lambda: |-
      if ((id(panel_out).state != NAN) and (id(in_from_panel).state != NAN) and (id(out_to_panel).state != NAN) and (id(sun_elevation).state != NAN))
        if (id(panel_out).state < 20)                                 // Panel under 20C
          return -10;
        else if (id(sun_elevation).state < 17)                        // Panel over 20C and Low sun elevation
          return -12;
        else if (id(panel_out).state > 45)                            // High sun elevation and Panel over 45C
          if (id(panel_out).state > (id(in_from_panel).state) + 1)    //   Panel warmer than Boiler Top
            return 15;
          else                                                        //   Panel colder than Boiler Top
            if (id(panel_out).state > (id(out_to_panel).state) + 1)   //     Panel warmer than Boiler Bottom
              return 17;
            else                                                      //     Panel colder than Boiler Top and Boiler Bottom
              return -14;
        else                                                          // Panel under 45C
          return (id(panel_out).state - id(in_from_panel).state);
      else                                                            // No temperature readings (NAN)
        return -16;
    on_value_range:
      - above: 1  # Turn ON - When Panel temperature is higher than Boiler Top
        then:
          - switch.turn_on: manual_relay
      - below: 0  # Turn OFF - When Panel temperature is lower than Boiler Top
        then:
          - switch.turn_off: manual_relay

binary_sensor:
  - platform: gpio
    pin:
      number: D2
      inverted: True
    device_class: moisture
    name: "${friendly_name} Water Alarm"

switch:
  - platform: gpio
    name: "${friendly_name} Pump Manual"
    pin:
      number: D7
      inverted: TRUE
    id: manual_relay
    interlock: &interlock_group [manual_relay, auto_relay]
    interlock_wait_time: 250ms
    restore_mode: ALWAYS_OFF

  - platform: gpio
    name: "${friendly_name} Pump Auto"
    pin:
      number: D1
      inverted: TRUE
    id: auto_relay
    interlock: *interlock_group
    interlock_wait_time: 250ms
    restore_mode: ALWAYS_OFF
